extends Node
class_name AIQuestionBuilder

signal quiz_ready(quiz_item: Dictionary)
signal generation_failed(reason: String)

# JSON Schema para valida√ß√£o da resposta
const QUESTION_SCHEMA = {
	"type": "object",
	"properties": {
		"subject": {
			"type": "string",
			"description": "A mat√©ria/disciplina da pergunta"
		},
		"question": {
			"type": "string",
			"description": "O texto da pergunta"
		},
		"options": {
			"type": "object",
			"properties": {
				"A": {"type": "string"},
				"B": {"type": "string"},
				"C": {"type": "string"},
				"D": {"type": "string"}
			},
			"required": ["A", "B", "C", "D"],
			"additionalProperties": false
		},
		"correct": {
			"type": "string",
			"enum": ["A", "B", "C", "D"],
			"description": "A letra da alternativa correta"
		},
		"rationale": {
			"type": "string",
			"description": "Explica√ß√£o do por que a resposta est√° correta"
		},
		"topic_hint": {
			"type": "string",
			"description": "Dica sobre o t√≥pico abordado"
		}
	},
	"required": ["subject", "question", "options", "correct", "rationale", "topic_hint"],
	"additionalProperties": false
}

# System prompt para a OpenAI
const SYSTEM_PROMPT = """Voc√™ √© um assistente especializado em criar quest√µes educacionais de m√∫ltipla escolha para estudantes do 6¬∫ ano do ensino fundamental brasileiro, seguindo rigorosamente a Base Nacional Comum Curricular (BNCC).

DIRETRIZES FUNDAMENTAIS:
- Crie quest√µes apropriadas para a faixa et√°ria (11-12 anos)
- Use linguagem clara, direta e acess√≠vel
- Baseie-se exclusivamente no curr√≠culo da BNCC para 6¬∫ ano
- Garanta que todas as alternativas sejam plaus√≠veis
- A resposta correta deve ser inequ√≠voca
- Evite pegadinhas ou armadilhas desnecess√°rias

ESTRUTURA OBRIGAT√ìRIA:
- Uma pergunta clara e objetiva
- Quatro alternativas distintas (A, B, C, D)
- Apenas uma alternativa correta
- Explica√ß√£o (rationale) educativa
- Dica do t√≥pico abordado

REGRAS ESPECIAIS:
- Se usar "Todas as anteriores" ou "Todas as alternativas", SEMPRE coloque como alternativa D
- Certifique-se de que as alternativas incorretas sejam educativas (n√£o absurdas)
- Varie os tipos de quest√£o: conceitual, aplica√ß√£o, interpreta√ß√£o
- Inclua contextos do cotidiano quando apropriado

VALIDA√á√ÉO:
- Todas as alternativas devem ser √∫nicas
- A resposta correta deve estar claramente identificada
- O conte√∫do deve ser adequado ao n√≠vel de escolaridade
- A explica√ß√£o deve ser pedag√≥gica e construtiva

Regras obrigat√≥rias de qualidade e corre√ß√£o (aplic√°vel a TODAS as disciplinas):

- Clareza: as frases devem ser simples, diretas, sem palavras desnecess√°rias.
- Ortografia e gram√°tica: o texto deve estar 100% correto em portugu√™s do Brasil (sem erros de acentua√ß√£o, concord√¢ncia ou pontua√ß√£o).
- Coer√™ncia: todas as alternativas precisam estar logicamente ligadas √† pergunta.
- Veracidade: use apenas informa√ß√µes factuais corretas e compat√≠veis com o n√≠vel de 6¬∫ ano da BNCC.
- Estilo: evite frases muito longas, termos t√©cnicos avan√ßados ou linguagem de adultos.
- Formata√ß√£o: nunca saia do formato solicitado (JSON v√°lido / op√ß√µes A‚ÄìD / uma resposta correta).
- SEMPRE produza uma pergunta de m√∫ltipla escolha com **apenas UMA resposta correta objetiva e verific√°vel**. 
- NUNCA crie perguntas de opini√£o, frases abertas ou interpretativas sem resposta clara.
- As alternativas erradas (distratores) devem parecer plaus√≠veis, mas serem claramente incorretas.
- Evite perguntas vagas ou subjetivas (ex.: ‚ÄúQual frase √© mais bonita sobre amizade?‚Äù).
- Verifique se a quest√£o tem gabarito √≥bvio para um professor de 6¬∫ ano e que qualquer aluno, ao estudar, consiga identificar a resposta correta.
"""

# User prompt template
const USER_PROMPT_TEMPLATE = """Crie uma quest√£o de m√∫ltipla escolha para:

CONTEXTO:
- Professor(a): {npc_name}
- Mat√©ria: {npc_subject}
- Tentativa: {attempt_count}

DIRETRIZES DE VARIEDADE:
{topic_variety_prompt}

REQUISITOS ESPEC√çFICOS:
- Quest√£o baseada na BNCC 6¬∫ ano para {npc_subject}
- N√≠vel apropriado para estudantes de 11-12 anos
- Alternativas plaus√≠veis e educativas
- Explica√ß√£o clara e pedag√≥gica

FORMATO DE RESPOSTA:
Retorne APENAS um objeto JSON v√°lido seguindo exatamente esta estrutura:
{{
  "subject": "{npc_subject}",
  "question": "Sua pergunta aqui",
  "options": {{
    "A": "Primeira alternativa",
    "B": "Segunda alternativa", 
    "C": "Terceira alternativa",
    "D": "Quarta alternativa"
  }},
  "correct": "A",
  "rationale": "Explica√ß√£o do por que a resposta A est√° correta",
  "topic_hint": "Dica sobre o t√≥pico abordado"
}}

IMPORTANTE: Responda APENAS com o JSON, sem texto adicional."""

var http_request: HTTPRequest
var current_payload: Dictionary
var regeneration_count: int = 0
var max_regenerations: int = 2

func _ready():
	http_request = HTTPRequest.new()
	add_child(http_request)
	http_request.request_completed.connect(_on_http_request_completed)

func build_system_prompt() -> String:
	return SYSTEM_PROMPT

func build_user_prompt(npc_name: String, npc_subject: String, topic_variety_prompt: String, attempt_count: int) -> String:
	return USER_PROMPT_TEMPLATE.format({
		"npc_name": npc_name,
		"npc_subject": npc_subject,
		"topic_variety_prompt": topic_variety_prompt,
		"attempt_count": attempt_count
	})

func build_payload(npc_name: String, npc_subject: String, topic_variety_prompt: String, attempt_count: int) -> Dictionary:
	var system_prompt = build_system_prompt()
	var user_prompt = build_user_prompt(npc_name, npc_subject, topic_variety_prompt, attempt_count)
	
	return {
		"model": "gpt-4o-mini",
		"messages": [
			{
				"role": "system",
				"content": system_prompt
			},
			{
				"role": "user",
				"content": user_prompt
			}
		],
		"response_format": {
			"type": "json_schema",
			"json_schema": {
				"name": "quiz_question",
				"schema": QUESTION_SCHEMA
			}
		},
		"temperature": 0.2,
		"presence_penalty": 0,
		"frequency_penalty": 0,
		"max_tokens": 800
	}

func validate_quiz_item(item: Dictionary) -> Dictionary:
	var validation_result = {
		"valid": false,
		"errors": []
	}
	
	# Verificar chaves obrigat√≥rias
	var required_keys = ["subject", "question", "options", "correct", "rationale", "topic_hint"]
	for key in required_keys:
		if not item.has(key):
			validation_result.errors.append("Campo obrigat√≥rio ausente: " + key)
	
	if validation_result.errors.size() > 0:
		return validation_result
	
	# Validar pergunta n√£o vazia
	if item.question.strip_edges() == "":
		validation_result.errors.append("Pergunta n√£o pode estar vazia")
	
	# Validar op√ß√µes
	if not item.options is Dictionary:
		validation_result.errors.append("Op√ß√µes devem ser um dicion√°rio")
		return validation_result
	
	var option_keys = ["A", "B", "C", "D"]
	for option_key in option_keys:
		if not item.options.has(option_key):
			validation_result.errors.append("Op√ß√£o ausente: " + option_key)
		elif item.options[option_key].strip_edges() == "":
			validation_result.errors.append("Op√ß√£o vazia: " + option_key)
	
	if validation_result.errors.size() > 0:
		return validation_result
	
	# Verificar se todas as op√ß√µes s√£o distintas
	var options_array = [item.options.A, item.options.B, item.options.C, item.options.D]
	var unique_options = {}
	for option in options_array:
		var normalized = option.strip_edges().to_lower()
		if unique_options.has(normalized):
			validation_result.errors.append("Op√ß√µes duplicadas encontradas")
			break
		unique_options[normalized] = true
	
	# Validar resposta correta
	if not item.correct in ["A", "B", "C", "D"]:
		validation_result.errors.append("Resposta correta deve ser A, B, C ou D")
	
	# Regra especial: "Todas as anteriores" deve ser D
	for option_key in option_keys:
		var option_text = item.options[option_key].to_lower()
		if "todas as anteriores" in option_text or "todas as alternativas" in option_text or "todas est√£o corretas" in option_text:
			if option_key != "D":
				validation_result.errors.append("Op√ß√£o 'Todas as anteriores' deve estar na alternativa D")
			break
	
	# Validar explica√ß√£o n√£o vazia
	if item.rationale.strip_edges() == "":
		validation_result.errors.append("Explica√ß√£o (rationale) n√£o pode estar vazia")
	
	# Validar dica n√£o vazia
	if item.topic_hint.strip_edges() == "":
		validation_result.errors.append("Dica do t√≥pico n√£o pode estar vazia")
	
	validation_result.valid = validation_result.errors.size() == 0
	return validation_result

func request_question(npc_name: String, npc_subject: String, topic_variety_prompt: String, attempt_count: int, supabase_proxy_url: String, anon_key: String):
	regeneration_count = 0
	current_payload = build_payload(npc_name, npc_subject, topic_variety_prompt, attempt_count)
	
	var headers = [
		"Content-Type: application/json",
		"Authorization: Bearer " + anon_key
	]
	
	var body = JSON.stringify({
		"prompt": current_payload.messages[1].content,
		"subject": npc_subject,
		"quiz_mode": "multipla_escolha",
		"openai_payload": current_payload
	})
	
	print("ü§ñ Enviando requisi√ß√£o para gera√ß√£o de pergunta...")
	print("üéØ Professor: ", npc_name)
	print("üéØ Mat√©ria: ", npc_subject)
	
	http_request.timeout = 45.0
	var result = http_request.request(supabase_proxy_url, headers, HTTPClient.METHOD_POST, body)
	
	if result != OK:
		print("‚ùå Falha ao enviar requisi√ß√£o: ", result)
		generation_failed.emit("Falha na conex√£o com o servidor")

func _on_http_request_completed(_result: int, response_code: int, _headers: PackedStringArray, body: PackedByteArray):
	print("üì® Resposta recebida - C√≥digo: ", response_code)
	
	if response_code != 200:
		print("‚ùå Erro HTTP: ", response_code)
		_regenerate_with_feedback("Erro HTTP: " + str(response_code))
		return
	
	if body.size() == 0:
		print("‚ùå Resposta vazia")
		_regenerate_with_feedback("Resposta vazia do servidor")
		return
	
	var response_text = body.get_string_from_utf8()
	print("üì® Resposta bruta: ", response_text.substr(0, 200), "...")
	
	# Parse da resposta do Supabase proxy
	var proxy_response = JSON.parse_string(response_text)
	if not proxy_response or not proxy_response is Dictionary:
		print("‚ùå Resposta do proxy inv√°lida")
		_regenerate_with_feedback("Resposta do proxy inv√°lida")
		return
	
	var ai_response = proxy_response.get("response", "")
	if ai_response == "":
		print("‚ùå Resposta da IA vazia")
		_regenerate_with_feedback("Resposta da IA vazia")
		return
	
	# Parse da resposta da IA como JSON
	var quiz_item = JSON.parse_string(ai_response)
	if not quiz_item or not quiz_item is Dictionary:
		print("‚ùå JSON da IA inv√°lido")
		_regenerate_with_feedback("JSON da IA inv√°lido")
		return
	
	# Validar o item do quiz
	var validation = validate_quiz_item(quiz_item)
	if not validation.valid:
		print("‚ùå Valida√ß√£o falhou: ", validation.errors)
		_regenerate_with_feedback("Valida√ß√£o falhou: " + str(validation.errors))
		return
	
	print("‚úÖ Pergunta gerada e validada com sucesso!")
	print("üéØ Pergunta: ", quiz_item.question)
	print("üéØ Resposta correta: ", quiz_item.correct)
	
	quiz_ready.emit(quiz_item)

func _regenerate_with_feedback(reason: String):
	regeneration_count += 1
	
	if regeneration_count >= max_regenerations:
		print("‚ùå M√°ximo de tentativas de regenera√ß√£o atingido")
		generation_failed.emit("N√£o foi poss√≠vel gerar a quest√£o ap√≥s " + str(max_regenerations) + " tentativas. Motivo: " + reason)
		return
	
	print("üîÑ Tentativa de regenera√ß√£o ", regeneration_count + 1, "/", max_regenerations)
	print("üîÑ Motivo: ", reason)
	
	# Modificar ligeiramente o payload para tentar novamente
	if current_payload.has("messages") and current_payload.messages.size() > 1:
		current_payload.messages[1].content += "\n\nIMPORTANTE: A tentativa anterior falhou (" + reason + "). Por favor, gere uma quest√£o v√°lida seguindo exatamente o formato JSON especificado."
	
	var headers = [
		"Content-Type: application/json",
		"Authorization: Bearer " + SupabaseConfig.ANON_KEY
	]
	
	var body = JSON.stringify({
		"prompt": current_payload.messages[1].content,
		"subject": current_payload.get("subject", ""),
		"quiz_mode": "multipla_escolha",
		"openai_payload": current_payload
	})
	
	var result = http_request.request(SupabaseConfig.OPENAI_PROXY_URL, headers, HTTPClient.METHOD_POST, body)
	
	if result != OK:
		generation_failed.emit("Falha na reconex√£o: " + str(result))
